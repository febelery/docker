# set search paths for pure Lua external libraries (';;' is the default path):
lua_package_path '/usr/local/openresty/lualib/?.lua;/var/www/html/test/lua/?.lua;/var/www/html/?.lua;;';

# set search paths for Lua external libraries written in C (can also use ';;'):
lua_package_cpath '/usr/local/openresty/lualib/?.so;/var/www/html/?.so;;';

# hide server version
server_tokens off;

lua_code_cache off;
lua_shared_dict my_cache 128m;


server {
    listen 8888 default_server;

    server_name openresty;
    charset utf-8;

    root   /var/www/html;
    index  index.html index.htm;

    location / {
        autoindex on;
        autoindex_exact_size off;
        autoindex_localtime on;
    }

    location /hello{
        resolver 8.8.8.8;
        default_type text/html;
        content_by_lua_file /var/www/html/test/lua/hello.lua;
    }

    location ~ '^/lua/(\w+(?:\/\w+)*)$' {
        # 准入阶段完成参数验证
        # access_by_lua_file  lua/access_check.lua;

        #内容生成阶段
        content_by_lua_file /var/www/html/test/lua/$1.lua;
    }

    location /ip_search{
        default_type text/html;
        content_by_lua_file /var/www/html/test/lua/ip/ip_search.lua;
    }

    location = /sum {
        internal;
        content_by_lua_block {
            ngx.sleep(0.1)
            local args = ngx.req.get_uri_args()
            ngx.print(tonumber(args.a) + tonumber(args.b))
        }
    }

    location = /subduction {
        internal;
        content_by_lua_block {
            ngx.sleep(0.1)
            local args = ngx.req.get_uri_args()
            ngx.print(tonumber(args.a) - tonumber(args.b))
        }
    }

    location = /app/test_parallels {
        content_by_lua_block {
            local start_time = ngx.now()
            local res1,res2 = ngx.location.capture_multi({
                {"/sum",{args={a=3,b=8}}},
                {"/subduction",{args={a=3,b=8}}}
            })
            ngx.say("status:",res1.status,"body:",res1.body)
            ngx.say("status:",res2.status,"body:",res2.body)
            ngx.say("time used:",ngx.now() - start_time)
        }
    }

    location = /app/test_queue {
        content_by_lua_block {
            local start_time = ngx.now()
            local res1 = ngx.location.capture_multi({
               {"/sum",{args={a=3,b=8}}},
            })
            local res2 = ngx.location.capture_multi({
               {"/subduction",{args={a=3,b=8}}}
            })
            ngx.say("status:",res1.status,"body:",res1.body)
            ngx.say("status:",res2.status,"body:",res2.body)
            ngx.say("time used:",ngx.now() - start_time)
        }
    }

    location /print_param {
        content_by_lua_block {
            local arg = ngx.req.get_uri_args()
            for k,v in pairs(arg) do
                ngx.say("[GET] key:",k," v:",v)
            end

            ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body
            local arg = ngx.req.get_post_args()
            for k,v in pairs(arg) do
                ngx.say("[POST] key:",k," v:",v)
            end
        }
    }

    location = /test_param {
        content_by_lua_block {
            local res = ngx.location.capture('/print_param',{
                method = ngx.HTTP_POST,
                args = ngx.encode_args({a = 1, b = '2'}),
                body = ngx.encode_args({c = 3, d = '4'})
            })
            ngx.say(res.body)
        }
    }

    location = /get_req_body {
        content_by_lua_block {
            ngx.req.read_body()
            local data = ngx.req.get_body_data()
            ngx.say("hello ",data);
        }
    }

}

